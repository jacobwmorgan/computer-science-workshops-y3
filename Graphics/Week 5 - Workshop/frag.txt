precision highp float;
precision highp int;

uniform float time;

varying vec3 vPosition;
varying vec3 vNormal;
varying vec2 vUv;
varying vec2 vUv2;

float random(vec2 u)
{
    return fract(sin(u.x * 2345.0 + cos(u.y*6543.0))*9876.0);
}

float valueNoise(vec2 u)
{
    vec2 f = smoothstep(0.0, 1.0, fract(u));
   // vec2 f = fract(u);
    vec2 i = floor(u);
    
    float c00 = random(i);
    float c10 = random(i +vec2(1.0, 0.0));
    float c01 = random(i + vec2(0.0, 1.0)); 
    float c11 = random(i + vec2(1.0, 1.0));
    
    float bottom = mix(c00, c10, f.x);
    float top = mix(c01, c11, f.x);
    float final = mix(bottom, top, f.y);
    
   return final;
}


void main() {

    float c = valueNoise(vUv*4.0-abs(sin(time*0.15)));
    c+= valueNoise(vUv*8.0-abs(sin(time*0.15)))*0.5;
    c+= valueNoise(vUv*16.0-abs(sin(time*0.15)))*0.25;
    c+= valueNoise(vUv*32.0-abs(sin(time*0.15)))*0.125;
    c+= valueNoise(vUv*64.0-abs(sin(time*0.15)))*0.0625;
    c *= 0.6;

    float blend1 = smoothstep(0.54, 0.56, c);
    float blend2 = smoothstep(0.56, 0.61, c);
    float blend3 = smoothstep(0.61, 0.65, c);
    float blend4 = smoothstep(0.65, 0.80, c);
    
    vec3 colour1 = mix(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0), blend1);
    vec3 colour2 = mix(colour1, vec3(0.0, 1.0, 0.0), blend2);
    vec3 colour3 = mix(colour2, vec3(0.0, 0.5, 0.0), blend3);
    vec3 colour4 = mix(colour3, vec3(1.0, 1.0, 1.0), blend4);
    
    float clouds = smoothstep(0.8, 1.0, valueNoise(vUv*20.0+abs(sin(time*0.01)*30.0))*1.5*(cos(time)*0.1+1.0));
    vec3 colour_final = mix(colour4*1.6, vec3(clouds)*1.8, 0.5);
    
    gl_FragColor = vec4( colour_final, 1.0 ) ;
    

}